/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pa1_template;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Arrays;

class pa1Test {


    @Test
    public void bubbleEmptyTest(){
        BubbleSort bubble = new BubbleSort();
        int[] A = new int[0];
        int[] result = bubble.bubbleSort(A); 
        assertTrue(result.length == 0);
    }

    @Test
    public void bubbleOneElementTest(){
        BubbleSort bubble = new BubbleSort();
        int[] A = new int[1];
        A[0] = 5;
        int[] result = bubble.bubbleSort(A);
        assertTrue(result[0] == 5);
    }

    @Test
    public void swapTest(){
        BubbleSort bubble = new BubbleSort();
        int[] A = new int[3];
        for (int i = 1; i<=3; i++){
            A[i-1] = i;
        }
        bubble.swap(A, 0, 2);
        assertTrue(A[0] == 3);
        assertTrue(A[1] == 2);
        assertTrue(A[2] == 1);

    }

    @Test
    public void bubbleSortTest(){
        BubbleSort bubble = new BubbleSort();
        int[] A = new int[4];
        A[0] = 1;
        A[1] = 4;
        A[2] = -5;
        A[3] = 10;
        int[] result = bubble.bubbleSort(A);
        System.out.println(Arrays.toString(result));
        assertTrue(result[0] == -5);
        assertTrue(result[1] == 1);
        assertTrue(result[2] == 4);
        assertTrue(result[3] == 10);
    }

    @Test
    public void mergeSortEmptyTest(){
        MergeSort merge = new MergeSort();
        int[] A = new int[0];
        int[] result = merge.mergeSort(A, 0, A.length-1); 
        assertTrue(result.length == 0);
    }

    @Test
    public void mergeSortOneElementTest(){
        MergeSort merge = new MergeSort();
        int[] A = new int[1];
        A[0] = 4;
        int[] result = merge.mergeSort(A, 0, A.length-1); 
        assertTrue(result.length == 1);
        assertTrue(result[0] == 4);
    }

    @Test
    public void mergeTest(){
        MergeSort merge = new MergeSort();
        int[] A = new int[4];
        A[0] = 1;
        A[1] = 4;
        A[2] = -5;
        A[3] = 10;
        int[] result = merge.merge(A, 0, 1, 3);
        assertTrue(result[0] == -5);
        assertTrue(result[1] == 1);
        assertTrue(result[2] == 4);
        assertTrue(result[3] == 10);
    }

    @Test
    public void mergeSortFullTest(){
        MergeSort merge = new MergeSort();
        int[] A = new int[4];
        A[0] = 1;
        A[1] = 4;
        A[2] = -5;
        A[3] = 10;
        int[] result = merge.mergeSort(A, 0, A.length-1);
        System.out.println(Arrays.toString(result));
        assertTrue(result[0] == -5);
        assertTrue(result[1] == 1);
        assertTrue(result[2] == 4);
        assertTrue(result[3] == 10);
    }

    @Test
    public void quickSortTesting(){
        QuickSort quick = new QuickSort();
        int[] A = new int [4];
        A[0] = 1;
        A[1] = 4;
        A[2] = -5;
        A[3] = 10;
        int[] lemuto = quick.lemutoQuickSort(A, 0, A.length-1);
        int[] hoare = quick.hoareQuickSort(A, 0, A.length-1);
        System.out.println(Arrays.toString(lemuto));
        System.out.println(Arrays.toString(hoare));
        assertTrue(lemuto[0] == -5);
        assertTrue(lemuto[1] == 1);
        assertTrue(lemuto[2] == 4);
        assertTrue(lemuto[3] == 10);
        assertTrue(hoare[0] == -5);
        assertTrue(hoare[1] == 1);
        assertTrue(hoare[2] == 4);
        assertTrue(hoare[3] == 10);
    }
}
